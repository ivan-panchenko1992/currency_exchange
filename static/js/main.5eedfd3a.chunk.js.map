{"version":3,"sources":["Api/request.ts","Api/PayMethod.ts","images/Vector.svg","Components/SuccessPage/SuccessPage.tsx","Components/Ð¡onfirmationPage/ConfirmationPage.tsx","Components/ExchangeForm/ExchangeForm.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","respose","json","catch","Error","BASE_URL","getValueInvoise","idInvoice","base","idWithdraw","amount","SuccessPage","className","alt","src","Vector","type","ConfirmationPage","invoiseValue","withdrawValue","invoisePayMethod","withdrawPayMethod","invoicePayMethodId","withdrawPayMethodId","invoicePayMethodName","find","method","id","withdrawPayMethodName","name","ExchangeForm","setIsVisibleCoferm","setInvoicePayMethodId","handleChangeValue","setWithdrawPayMethodId","onChange","event","target","value","map","placeholder","onClick","App","useState","setWithdrawValue","setInvoiseValue","payMethod","setPaymethod","setInvosePayMethod","setWithdrawPayMethod","isVisibleCoferm","useEffect","result","invoice","withdraw","console","log","String","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5eedfd3a.chunk.js","sourcesContent":["import { PostBody } from '../interfaces';\n\nexport const request = (url: string) => fetch(url)\n  .then((respose) => respose.json()).catch(() => new Error('faild download'));\n\nexport const postRequest = (url: string, obj: PostBody) => fetch(`${url}/bids`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(obj),\n});\n","import { request, postRequest } from './request';\n\nconst BASE_URL = 'https://involve.software/test_front/api';\nconst calculate = '/payMethods/calculate?base=';\nexport const getPayMethods = () => request(`${BASE_URL}/payMethods`);\n\nexport const getValueInvoise = (\n  idInvoice: number, base:string, idWithdraw: number, amount: number,\n) => (\n  request(`${BASE_URL}${calculate}${base}&amount=${amount}&invoicePayMethod=${idInvoice}&withdrawPayMethod=${idWithdraw}`)\n);\n\nexport const getSuccess = (\n  amount: number, base: string, sellPayMethod: number, buyPayMethod: number,\n) => {\n  const prepearedObject = {\n    amount,\n    base,\n    invoicePayMethod: sellPayMethod,\n    withdrawPayMethod: buyPayMethod,\n  };\n\n  return postRequest(BASE_URL, prepearedObject);\n};\n","export default __webpack_public_path__ + \"static/media/Vector.a167a025.svg\";","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './SuccessPage.css';\nimport Vector from '../../images/Vector.svg';\n\nexport const SuccessPage: React.FC = () => (\n  <div className=\"success-page\">\n    <img alt=\"success\" src={Vector} />\n    <h1 className=\"success-page__heading\">Success!</h1>\n    <p className=\"success-page__text\">\n      Your exchange order has been placed\n      <br />\n      successfully and will be processed soon.\n    </p>\n    <button\n      type=\"button\"\n      className=\"success-page__button\"\n    >\n      Home\n    </button>\n\n  </div>\n);\n","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './ConfirmationPage.css';\nimport { PayMethod } from '../../interfaces';\n\ninterface Props {\n  payMethod: string,\n  invoiseValue: string,\n  withdrawValue: string,\n  invoisePayMethod: PayMethod[],\n  withdrawPayMethod: PayMethod[],\n  invoicePayMethodId: number,\n  withdrawPayMethodId: number,\n}\n\nexport const ConfirmationPage: React.FC<Props> = ({\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n  invoicePayMethodId,\n  withdrawPayMethodId,\n\n}) => {\n  const invoicePayMethodName = invoisePayMethod\n    .find((method) => method.id === invoicePayMethodId);\n  const withdrawPayMethodName = withdrawPayMethod\n    .find((method) => method.id === withdrawPayMethodId);\n\n  return (\n    <div className=\"card-confirmation\">\n      <h1 className=\"card-confirmation__heading\">Details</h1>\n      <div className=\"card-confirmation__invoise\">\n        <p className=\"card-confirmation__invoise-sell\">Sell:</p>\n        <p\n          className=\"card-confirmation__invoise-quontity\"\n        >\n          {invoiseValue}\n          {' '}\n          {invoicePayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__withdraw\">\n        <p className=\"card-confirmation__withdraw-buy\">Buy:</p>\n        <p\n          className=\"card-confirmation__withdraw-quontity\"\n        >\n          {withdrawValue}\n          {' '}\n          {withdrawPayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__button\">\n        <button\n          type=\"button\"\n          className=\"card-confirmation__button-cancel\"\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"card-confirmation__button-confirme\"\n        >\n          Confirme\n        </button>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './ExchangeForm.css';\nimport { PayMethod } from '../../interfaces';\n\ninterface Props {\n  invoisePayMethod: PayMethod[],\n  setIsVisibleCoferm: any,\n  // onExchange: any,\n  setInvoicePayMethodId: any,\n  handleChangeValue: any,\n  setWithdrawPayMethodId: any,\n  invoiseValue: string,\n  withdrawValue: string,\n  withdrawPayMethod: PayMethod[],\n}\n\nexport const ExchangeForm: React.FC<Props> = ({\n  // onExchange,\n  setIsVisibleCoferm,\n  setInvoicePayMethodId,\n  handleChangeValue,\n  setWithdrawPayMethodId,\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n}) => (\n  <form\n    className=\"container\"\n    // onSubmit={(event) => onExchange(event)}\n  >\n    <div className=\"card-container\">\n      <div className=\"card\">\n        <h1 className=\"card__heading\">Sell</h1>\n        <select\n          name=\"select\"\n          className=\"card__select\"\n          onChange={(event) => (\n            setInvoicePayMethodId(+event.target.value))}\n        >\n          <option value=\"null\">All currency</option>\n          {invoisePayMethod.map((method) => (\n            <option\n              value={method.id}\n              key={method.id}\n            >\n              {method.name}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          name=\"invoice\"\n          value={invoiseValue}\n          placeholder=\"write your numbers\"\n          className=\"card__input\"\n          onChange={(event) => handleChangeValue(event)}\n        />\n      </div>\n      <div className=\"card\">\n        <h1 className=\"card__heading\">Buy</h1>\n        <select\n          name=\"select\"\n          className=\"card__select\"\n          onChange={(event) => setWithdrawPayMethodId(+event.target.value)}\n        >\n          <option value=\"null\">All currency</option>\n          {withdrawPayMethod.map((method) => (\n            <option\n              value={method.id}\n              key={method.id}\n            >\n              {method.name}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          name=\"withdraw\"\n          value={withdrawValue}\n          placeholder=\"write your numbers\"\n          className=\"card__input\"\n          onChange={(event) => handleChangeValue(event)}\n        />\n      </div>\n    </div>\n    <div className=\"button-container\">\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => setIsVisibleCoferm(true)}\n      >\n        Exchange\n      </button>\n    </div>\n  </form>\n);\n","// eslint-disable-next-line import/no-unresolved\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { Route } from 'react-router-dom';\nimport { getValueInvoise, getPayMethods } from './Api/PayMethod';\nimport { Amount, ResultPaymethods, PayMethod } from './interfaces';\nimport { SuccessPage } from './Components/SuccessPage/SuccessPage';\nimport { ConfirmationPage } from './Components/Ð¡onfirmationPage/ConfirmationPage';\nimport { ExchangeForm } from './Components/ExchangeForm/ExchangeForm';\n\nconst App: React.FC = () => {\n  const [invoicePayMethodId, setInvoicePayMethodId] = useState<number>(0);\n  const [withdrawPayMethodId, setWithdrawPayMethodId] = useState(0);\n  const [withdrawValue, setWithdrawValue] = useState('');\n  const [invoiseValue, setInvoiseValue] = useState('');\n  const [payMethod, setPaymethod] = useState<string>('');\n  const [invoisePayMethod, setInvosePayMethod] = useState<PayMethod[]>([]);\n  const [withdrawPayMethod, setWithdrawPayMethod] = useState<PayMethod[]>([]);\n  const [isVisibleCoferm, setIsVisibleCoferm] = useState(false);\n\n  useEffect(() => {\n    getPayMethods().then((result: ResultPaymethods) => {\n      setInvosePayMethod(result.invoice);\n      setWithdrawPayMethod(result.withdraw);\n    });\n  }, []);\n\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'invoice') {\n      setInvoiseValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'invoice', withdrawPayMethodId, +value)\n          .then((result: Amount) => {\n            setWithdrawValue(String(result.amount));\n            setPaymethod('invoise');\n          });\n      } else {\n        setWithdrawValue('');\n      }\n      return;\n    }\n\n    if (name === 'withdraw') {\n      setWithdrawValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'withdraw', withdrawPayMethodId, +value)\n          .then((result: Amount) => {\n            setInvoiseValue(String(result.amount));\n            setPaymethod('withdraw');\n          });\n      } else {\n        setInvoiseValue('');\n      }\n    }\n  };\n\n  // const exchange = (event: React.FormEvent<HTMLFormElement>): void => {\n  //   event.preventDefault();\n  //   setIsVisibleCoferm(true);\n  // };\n  console.log(isVisibleCoferm);\n\n  return (\n    <div className=\"app\">\n      {!isVisibleCoferm && (\n        <ExchangeForm\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          // onExchange={exchange}\n          setIsVisibleCoferm={setIsVisibleCoferm}\n          setInvoicePayMethodId={setInvoicePayMethodId}\n          handleChangeValue={handleChangeValue}\n          setWithdrawPayMethodId={setWithdrawPayMethodId}\n          withdrawValue={withdrawValue}\n          invoiseValue={invoiseValue}\n        />\n      )}\n      {isVisibleCoferm && (\n        <ConfirmationPage\n          withdrawValue={withdrawValue}\n          payMethod={payMethod}\n          invoiseValue={invoiseValue}\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          invoicePayMethodId={invoicePayMethodId}\n          withdrawPayMethodId={withdrawPayMethodId}\n        />\n      )}\n      <Route path=\"/success\">\n        <SuccessPage />\n      </Route>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}