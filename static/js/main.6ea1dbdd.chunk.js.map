{"version":3,"sources":["Api/request.ts","Api/PayMethod.ts","images/Vector.svg","Components/SuccessPage/SuccessPage.tsx","Components/Ð¡onfirmationPage/ConfirmationPage.tsx","Components/ExchangeForm/ExchangeForm.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","respose","json","catch","Error","BASE_URL","getValueInvoise","idInvoice","base","idWithdraw","amount","getSuccess","sellPayMethod","buyPayMethod","data","invoicePayMethod","withdrawPayMethod","method","headers","body","JSON","stringify","response","ok","statusText","error","console","log","SuccessPage","setPage","className","alt","src","Vector","type","onClick","ConfirmationPage","invoiseValue","withdrawValue","invoisePayMethod","invoicePayMethodId","withdrawPayMethodId","payMethod","useState","isLoading","setIsLoading","invoicePayMethodName","find","id","withdrawPayMethodName","classNames","name","disabled","result","message","ExchangeForm","setInvoicePayMethodId","handleChangeValue","setWithdrawPayMethodId","isNotAdd","setNotAdd","onSubmit","event","preventDefault","exchangeSubmit","onChange","target","value","map","placeholder","App","setWithdrawValue","setInvoiseValue","setPayMethod","setInvosePayMethod","setWithdrawPayMethod","page","useEffect","invoice","withdraw","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ea1dbdd.chunk.js","sourcesContent":["import { PostBody } from '../interfaces';\n\nexport const request = (url: string) => fetch(url)\n  .then((respose) => respose.json()).catch(() => new Error('failed download'));\n\nexport const postRequest = (url: string, data: PostBody) => fetch(`${url}/bids`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data),\n}).then((response) => {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response.json();\n})\n  // eslint-disable-next-line no-console\n  .catch((error) => console.log(error));\n","import { request, postRequest } from './request';\n\nconst BASE_URL = 'https://involve.software/test_front/api';\nconst calculate = '/payMethods/calculate?base=';\nexport const getPayMethods = () => request(`${BASE_URL}/payMethods`);\n\nexport const getValueInvoise = (\n  idInvoice: number, base:string, idWithdraw: number, amount: string,\n) => (\n  request(`${BASE_URL}${calculate}${base}&amount=${amount}&invoicePayMethod=${idInvoice}&withdrawPayMethod=${idWithdraw}`)\n);\n\nexport const getSuccess = (\n  amount: string, base: string, sellPayMethod: number, buyPayMethod: number,\n) => {\n  const prepearedQuerry = {\n    amount,\n    base,\n    invoicePayMethod: sellPayMethod,\n    withdrawPayMethod: buyPayMethod,\n  };\n\n  return postRequest(BASE_URL, prepearedQuerry);\n};\n","export default __webpack_public_path__ + \"static/media/Vector.a167a025.svg\";","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './SuccessPage.scss';\nimport Vector from '../../images/Vector.svg';\n\ninterface Props {\n  setPage: any,\n}\n\nexport const SuccessPage: React.FC<Props> = ({ setPage }) => (\n  <form className=\"success-page\">\n    <img alt=\"success\" src={Vector} />\n    <h1 className=\"success-page__heading\">Success!</h1>\n    <p className=\"success-page__text\">\n      Your exchange order has been placed\n      <br />\n      successfully and will be processed soon.\n    </p>\n    <button\n      type=\"button\"\n      className=\"success-page__button\"\n      onClick={() => setPage('form')}\n    >\n      Home\n    </button>\n\n  </form>\n);\n","// eslint-disable-next-line import/no-unresolved\nimport React, { useState } from 'react';\nimport './ConfirmationPage.scss';\nimport classNames from 'classnames';\nimport { PayMethod, ConfirmatoryAnswer } from '../../interfaces';\nimport { getSuccess } from '../../Api/PayMethod';\n\ninterface Props {\n  payMethod: string,\n  invoiseValue: string,\n  withdrawValue: string,\n  invoisePayMethod: PayMethod[],\n  withdrawPayMethod: PayMethod[],\n  invoicePayMethodId: number,\n  withdrawPayMethodId: number,\n  setPage: any,\n}\n\nexport const ConfirmationPage: React.FC<Props> = ({\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n  invoicePayMethodId,\n  withdrawPayMethodId,\n  setPage,\n  payMethod,\n\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const invoicePayMethodName = invoisePayMethod\n    .find((method) => method.id === invoicePayMethodId);\n  const withdrawPayMethodName = withdrawPayMethod\n    .find((method) => method.id === withdrawPayMethodId);\n\n  const confirmation = () => {\n    setIsLoading(true);\n    if (payMethod === 'invoice') {\n      getSuccess(invoiseValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setIsLoading(false);\n            setPage('success');\n          }\n        });\n    }\n    if (payMethod === 'withdraw') {\n      getSuccess(withdrawValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setIsLoading(false);\n            setPage('success');\n          }\n        });\n    }\n  };\n\n  return (\n    <div className={classNames('card-confirmation', {\n      'card-confirmation-loading': isLoading,\n    })}\n    >\n      <h1 className=\"card-confirmation__heading\">Details</h1>\n      <div className=\"card-confirmation__invoise\">\n        <p className=\"card-confirmation__invoise-sell\">Sell:</p>\n        <p\n          className=\"card-confirmation__invoise-quontity\"\n        >\n          {invoiseValue}\n          {' '}\n          {invoicePayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__withdraw\">\n        <p className=\"card-confirmation__withdraw-buy\">Buy:</p>\n        <p\n          className=\"card-confirmation__withdraw-quontity\"\n        >\n          {withdrawValue}\n          {' '}\n          {withdrawPayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__button\">\n        <button\n          type=\"button\"\n          className=\"card-confirmation__button-cancel\"\n          onClick={() => setPage('form')}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          disabled={isLoading}\n          className=\"card-confirmation__button-confirme\"\n          onClick={() => confirmation()}\n        >\n          {isLoading\n            ? 'Loading...'\n            : 'Confirme'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line import/no-unresolved\nimport React, { useState } from 'react';\nimport './ExchangeForm.scss';\nimport { PayMethod } from '../../interfaces';\n\ninterface Props {\n  invoisePayMethod: PayMethod[],\n  setPage: any,\n  setInvoicePayMethodId: any,\n  handleChangeValue: any,\n  setWithdrawPayMethodId: any,\n  invoiseValue: string,\n  withdrawValue: string,\n  withdrawPayMethod: PayMethod[],\n}\n\nexport const ExchangeForm: React.FC<Props> = ({\n  setPage,\n  setInvoicePayMethodId,\n  handleChangeValue,\n  setWithdrawPayMethodId,\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n}) => {\n  const [isNotAdd, setNotAdd] = useState(false);\n\n  const exchangeSubmit = (event: any) => {\n    event.preventDefault();\n    if (invoiseValue !== '' && withdrawValue !== '') {\n      setPage('conferm');\n      setNotAdd(false);\n    }\n    setNotAdd(true);\n  };\n  return (\n    <form\n      className=\"container\"\n      onSubmit={(event) => exchangeSubmit(event)}\n    >\n      <div className=\"card-container\">\n        <div className=\"card\">\n          <h1 className=\"card__heading\">Sell</h1>\n          <select\n            name=\"select\"\n            className=\"card__select\"\n            onChange={(event) => {\n              setInvoicePayMethodId(+event.target.value);\n            }}\n          >\n            {invoisePayMethod.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"invoice\"\n            value={invoiseValue}\n            placeholder=\"write your numbers\"\n            className=\"card__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n        <div className=\"card\">\n          <h1 className=\"card__heading\">Buy</h1>\n          <select\n            name=\"select\"\n            className=\"card__select\"\n            onChange={(event) => setWithdrawPayMethodId(+event.target.value)}\n          >\n            {withdrawPayMethod.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"withdraw\"\n            value={withdrawValue}\n            placeholder=\"write your numbers\"\n            className=\"card__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n      </div>\n      {isNotAdd\n        && <p>âYou forgot to enter quantity of currenciesâ</p>}\n      <div className=\"button-container\">\n        <button\n          className=\"button-container__button\"\n          type=\"submit\"\n        >\n          Exchange\n        </button>\n      </div>\n    </form>\n  );\n};\n","// eslint-disable-next-line import/no-unresolved\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { getValueInvoise, getPayMethods } from './Api/PayMethod';\nimport { Amount, ResultPaymethods, PayMethod } from './interfaces';\nimport { SuccessPage } from './Components/SuccessPage/SuccessPage';\nimport { ConfirmationPage } from './Components/Ð¡onfirmationPage/ConfirmationPage';\nimport { ExchangeForm } from './Components/ExchangeForm/ExchangeForm';\n\nconst App: React.FC = () => {\n  const [invoicePayMethodId, setInvoicePayMethodId] = useState<number>(0);\n  const [withdrawPayMethodId, setWithdrawPayMethodId] = useState<number>(0);\n  const [withdrawValue, setWithdrawValue] = useState('');\n  const [invoiseValue, setInvoiseValue] = useState('');\n  const [payMethod, setPayMethod] = useState<string>('');\n  const [invoisePayMethod, setInvosePayMethod] = useState<PayMethod[]>([]);\n  const [withdrawPayMethod, setWithdrawPayMethod] = useState<PayMethod[]>([]);\n  const [page, setPage] = useState('form');\n\n  useEffect(() => {\n    getPayMethods().then((result: ResultPaymethods) => {\n      setInvosePayMethod(result.invoice);\n      setInvoicePayMethodId(result.invoice[0].id);\n      setWithdrawPayMethod(result.withdraw);\n      setWithdrawPayMethodId(result.withdraw[0].id);\n    });\n  }, []);\n\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'invoice') {\n      setInvoiseValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'invoice', withdrawPayMethodId, value)\n          .then((result: Amount) => {\n            setWithdrawValue(String(result.amount));\n            setPayMethod('invoice');\n          });\n      } else {\n        setWithdrawValue('');\n      }\n      return;\n    }\n\n    if (name === 'withdraw') {\n      setWithdrawValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'withdraw', withdrawPayMethodId, value)\n          .then((result: Amount) => {\n            setInvoiseValue(String(result.amount));\n            setPayMethod('withdraw');\n          });\n      } else {\n        setInvoiseValue('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {page === 'form' && (\n        <ExchangeForm\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          setPage={setPage}\n          setInvoicePayMethodId={setInvoicePayMethodId}\n          handleChangeValue={handleChangeValue}\n          setWithdrawPayMethodId={setWithdrawPayMethodId}\n          withdrawValue={withdrawValue}\n          invoiseValue={invoiseValue}\n        />\n      )}\n      {page === 'conferm' && (\n        <ConfirmationPage\n          withdrawValue={withdrawValue}\n          payMethod={payMethod}\n          invoiseValue={invoiseValue}\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          invoicePayMethodId={invoicePayMethodId}\n          withdrawPayMethodId={withdrawPayMethodId}\n          setPage={setPage}\n        />\n      )}\n      {page === 'success' && (\n        <SuccessPage\n          setPage={setPage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}