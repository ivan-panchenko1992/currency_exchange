{"version":3,"sources":["Api/request.ts","Api/PayMethod.ts","App.tsx","index.tsx"],"names":["request","url","fetch","then","respose","json","catch","Error","BASE_URL","getValueInvoise","idInvoice","base","idWithdraw","amount","App","useState","invoisePayMethod","setInvosePayMethod","withdrawPayMethod","setWithdrawPayMethod","invoicePayMethodId","setInvoicePayMethodId","withdrawPayMethodId","setWithdrawPayMethodId","withdrawValue","setWithdrawValue","invoiseValue","setInvoiseValue","useEffect","result","invoice","withdraw","handleChangeValue","event","target","name","value","String","className","Card","body","CardTitle","tag","FormGroup","Input","type","onChange","map","method","id","placeholder","ButtonToggle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77676efc.chunk.js","sourcesContent":["export const request = (url: string) => fetch(url)\n  .then((respose) => respose.json()).catch(() => new Error('faild download'));\n","import { request } from './request';\n\nconst BASE_URL = 'https://involve.software/test_front/api';\nconst calculate = '/payMethods/calculate?base=';\nexport const getPayMethods = () => request(`${BASE_URL}/payMethods`);\n\nexport const getValueInvoise = (\n  idInvoice: number, base:string, idWithdraw: number, amount: number,\n) => (\n  request(`${BASE_URL}${calculate}${base}&amount=${amount}&invoicePayMethod=${idInvoice}&withdrawPayMethod=${idWithdraw}`)\n\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n  Card, CardTitle, Input, FormGroup, ButtonToggle,\n} from 'reactstrap';\nimport { getPayMethods, getValueInvoise } from './Api/PayMethod';\nimport { ResultPaymethods, PayMethod, Amount } from './interfaces';\n\nconst App: React.FC = () => {\n  const [invoisePayMethod, setInvosePayMethod] = useState<PayMethod[]>([]);\n  const [withdrawPayMethod, setWithdrawPayMethod] = useState<PayMethod[]>([]);\n  const [invoicePayMethodId, setInvoicePayMethodId] = useState(0);\n  const [withdrawPayMethodId, setWithdrawPayMethodId] = useState(0);\n  const [withdrawValue, setWithdrawValue] = useState('');\n  const [invoiseValue, setInvoiseValue] = useState('');\n\n  useEffect(() => {\n    getPayMethods().then((result: ResultPaymethods) => {\n      setInvosePayMethod(result.invoice);\n      setWithdrawPayMethod(result.withdraw);\n    });\n  }, []);\n\n  const handleChangeValue = (event: any) => {\n    const { name, value } = event.target;\n\n    if (name === 'invoise') {\n      setInvoiseValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'invoice', withdrawPayMethodId, value)\n          .then((result: Amount) => setWithdrawValue(String(result.amount)));\n      } else {\n        setWithdrawValue('');\n      }\n      return;\n    }\n\n    if (name === 'withdraw') {\n      setWithdrawValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'withdraw', withdrawPayMethodId, value)\n          .then((result: Amount) => setInvoiseValue(String(result.amount)));\n      } else {\n        setInvoiseValue('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <div className=\"card-container\">\n          <div className=\"card\">\n            <Card body>\n              <CardTitle tag=\"h1\" className=\"card__heading\">Sell</CardTitle>\n              <FormGroup className=\"form-groop\">\n                <Input\n                  type=\"select\"\n                  name=\"select\"\n                  className=\"card__select\"\n                  onChange={(event) => setInvoicePayMethodId(+event.target.value)}\n                >\n                  <option value=\"0\">All currency</option>\n                  {invoisePayMethod.map((method) => (\n                    <option\n                      value={method.id}\n                      key={method.id}\n                    >\n                      {method.name}\n                    </option>\n                  ))}\n                </Input>\n                <Input\n                  type=\"number\"\n                  name=\"invoise\"\n                  value={invoiseValue}\n                  placeholder=\"write your numbers\"\n                  className=\"card__input\"\n                  onChange={(event) => handleChangeValue(event)}\n                />\n              </FormGroup>\n            </Card>\n          </div>\n          <div className=\"card\">\n            <Card body>\n              <CardTitle tag=\"h1\" className=\"card__heading\">Buy</CardTitle>\n              <FormGroup className=\"form-groop\">\n                <Input\n                  type=\"select\"\n                  name=\"select\"\n                  className=\"card__select\"\n                  onChange={(event) => setWithdrawPayMethodId(+event.target.value)}\n                >\n                  <option value=\"0\">All currency</option>\n                  {withdrawPayMethod.map((method) => (\n                    <option\n                      value={method.id}\n                      key={method.id}\n                    >\n                      {method.name}\n                    </option>\n                  ))}\n                </Input>\n                <Input\n                  type=\"number\"\n                  name=\"withdraw\"\n                  value={withdrawValue}\n                  placeholder=\"write your numbers\"\n                  className=\"card__input\"\n                  onChange={(event) => handleChangeValue(event)}\n                />\n              </FormGroup>\n            </Card>\n          </div>\n        </div>\n        <div className=\"button-container\">\n          <ButtonToggle className=\"button\">\n            Exchange\n          </ButtonToggle>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}