{"version":3,"sources":["Api/request.ts","Api/PayMethod.ts","images/Vector.svg","Components/SuccessPage/SuccessPage.tsx","Components/Ð¡onfirmationPage/ConfirmationPage.tsx","Components/ExchangeForm/ExchangeForm.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","respose","json","catch","Error","BASE_URL","getValueInvoise","idInvoice","base","idWithdraw","amount","getSuccess","sellPayMethod","buyPayMethod","data","invoicePayMethod","withdrawPayMethod","method","headers","body","JSON","stringify","response","ok","statusText","error","console","log","SuccessPage","className","alt","src","Vector","type","ConfirmationPage","invoiseValue","withdrawValue","invoisePayMethod","invoicePayMethodId","withdrawPayMethodId","setPage","payMethod","invoicePayMethodName","find","id","withdrawPayMethodName","name","onClick","result","message","ExchangeForm","setInvoicePayMethodId","handleChangeValue","setWithdrawPayMethodId","onSubmit","event","preventDefault","exchangeHandler","onChange","target","value","map","required","placeholder","App","useState","setWithdrawValue","setInvoiseValue","setPayMethod","setInvosePayMethod","setWithdrawPayMethod","page","useEffect","invoice","withdraw","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd87b1c2.chunk.js","sourcesContent":["import { PostBody } from '../interfaces';\n\nexport const request = (url: string) => fetch(url)\n  .then((respose) => respose.json()).catch(() => new Error('failed download'));\n\nexport const postRequest = (url: string, data: PostBody) => fetch(`${url}/bids`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data),\n}).then((response) => {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response.json();\n})\n  // eslint-disable-next-line no-console\n  .catch((error) => console.log(error));\n","import { request, postRequest } from './request';\n\nconst BASE_URL = 'https://involve.software/test_front/api';\nconst calculate = '/payMethods/calculate?base=';\nexport const getPayMethods = () => request(`${BASE_URL}/payMethods`);\n\nexport const getValueInvoise = (\n  idInvoice: number, base:string, idWithdraw: number, amount: string,\n) => (\n  request(`${BASE_URL}${calculate}${base}&amount=${amount}&invoicePayMethod=${idInvoice}&withdrawPayMethod=${idWithdraw}`)\n);\n\nexport const getSuccess = (\n  amount: string, base: string, sellPayMethod: number, buyPayMethod: number,\n) => {\n  const prepearedQuerry = {\n    amount,\n    base,\n    invoicePayMethod: sellPayMethod,\n    withdrawPayMethod: buyPayMethod,\n  };\n\n  return postRequest(BASE_URL, prepearedQuerry);\n};\n","export default __webpack_public_path__ + \"static/media/Vector.a167a025.svg\";","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './SuccessPage.scss';\nimport Vector from '../../images/Vector.svg';\n\nexport const SuccessPage: React.FC = () => (\n  <form className=\"success-page\">\n    <img alt=\"success\" src={Vector} />\n    <h1 className=\"success-page__heading\">Success!</h1>\n    <p className=\"success-page__text\">\n      Your exchange order has been placed\n      <br />\n      successfully and will be processed soon.\n    </p>\n    <button\n      type=\"button\"\n      className=\"success-page__button\"\n    >\n      Home\n    </button>\n\n  </form>\n);\n","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './ConfirmationPage.scss';\nimport { PayMethod, ConfirmatoryAnswer } from '../../interfaces';\nimport { getSuccess } from '../../Api/PayMethod';\n\ninterface Props {\n  payMethod: string,\n  invoiseValue: string,\n  withdrawValue: string,\n  invoisePayMethod: PayMethod[],\n  withdrawPayMethod: PayMethod[],\n  invoicePayMethodId: number,\n  withdrawPayMethodId: number,\n  setPage: any,\n}\n\nexport const ConfirmationPage: React.FC<Props> = ({\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n  invoicePayMethodId,\n  withdrawPayMethodId,\n  setPage,\n  payMethod,\n\n}) => {\n  const invoicePayMethodName = invoisePayMethod\n    .find((method) => method.id === invoicePayMethodId);\n  const withdrawPayMethodName = withdrawPayMethod\n    .find((method) => method.id === withdrawPayMethodId);\n\n  const confirmation = () => {\n    if (payMethod === 'invoice') {\n      getSuccess(invoiseValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setPage('success');\n          }\n        });\n    }\n    if (payMethod === 'withdraw') {\n      getSuccess(withdrawValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setPage('success');\n          }\n        });\n    }\n  };\n\n  return (\n    <div className=\"card-confirmation\">\n      <h1 className=\"card-confirmation__heading\">Details</h1>\n      <div className=\"card-confirmation__invoise\">\n        <p className=\"card-confirmation__invoise-sell\">Sell:</p>\n        <p\n          className=\"card-confirmation__invoise-quontity\"\n        >\n          {invoiseValue}\n          {' '}\n          {invoicePayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__withdraw\">\n        <p className=\"card-confirmation__withdraw-buy\">Buy:</p>\n        <p\n          className=\"card-confirmation__withdraw-quontity\"\n        >\n          {withdrawValue}\n          {' '}\n          {withdrawPayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__button\">\n        <button\n          type=\"button\"\n          className=\"card-confirmation__button-cancel\"\n          onClick={() => setPage('form')}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          className=\"card-confirmation__button-confirme\"\n          onClick={() => confirmation()}\n        >\n          Confirme\n        </button>\n      </div>\n    </div>\n  );\n};\n","// eslint-disable-next-line import/no-unresolved\nimport React from 'react';\nimport './ExchangeForm.scss';\nimport { PayMethod } from '../../interfaces';\n\ninterface Props {\n  invoisePayMethod: PayMethod[],\n  setPage: any,\n  // onExchange: any,\n  setInvoicePayMethodId: any,\n  handleChangeValue: any,\n  setWithdrawPayMethodId: any,\n  invoiseValue: string,\n  withdrawValue: string,\n  withdrawPayMethod: PayMethod[],\n}\n\nexport const ExchangeForm: React.FC<Props> = ({\n  // onExchange,\n  setPage,\n  setInvoicePayMethodId,\n  handleChangeValue,\n  setWithdrawPayMethodId,\n  invoiseValue,\n  withdrawValue,\n  invoisePayMethod,\n  withdrawPayMethod,\n}) => {\n  const exchangeHandler = (event: any) => {\n    event.preventDefault();\n    setPage('conferm');\n  };\n  return (\n    <form\n      className=\"container\"\n      onSubmit={(event) => exchangeHandler(event)}\n    >\n      <div className=\"card-container\">\n        <div className=\"card\">\n          <h1 className=\"card__heading\">Sell</h1>\n          <select\n            name=\"select\"\n            className=\"card__select\"\n            onChange={(event) => (\n              setInvoicePayMethodId(+event.target.value))}\n          >\n            {invoisePayMethod.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"invoice\"\n            value={invoiseValue}\n            required\n            placeholder=\"write your numbers\"\n            className=\"card__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n        <div className=\"card\">\n          <h1 className=\"card__heading\">Buy</h1>\n          <select\n            name=\"select\"\n            className=\"card__select\"\n            onChange={(event) => setWithdrawPayMethodId(+event.target.value)}\n          >\n            {withdrawPayMethod.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"withdraw\"\n            required\n            value={withdrawValue}\n            placeholder=\"write your numbers\"\n            className=\"card__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n      </div>\n      <div className=\"button-container\">\n        <button\n          className=\"button-container__button\"\n          type=\"submit\"\n          // onClick={() => setIsVisibleCoferm('conferm')}\n        >\n          Exchange\n        </button>\n      </div>\n    </form>\n  );\n};\n","// eslint-disable-next-line import/no-unresolved\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { getValueInvoise, getPayMethods } from './Api/PayMethod';\nimport { Amount, ResultPaymethods, PayMethod } from './interfaces';\nimport { SuccessPage } from './Components/SuccessPage/SuccessPage';\nimport { ConfirmationPage } from './Components/Ð¡onfirmationPage/ConfirmationPage';\nimport { ExchangeForm } from './Components/ExchangeForm/ExchangeForm';\n\nconst App: React.FC = () => {\n  const [invoicePayMethodId, setInvoicePayMethodId] = useState<number>(0);\n  const [withdrawPayMethodId, setWithdrawPayMethodId] = useState<number>(0);\n  const [withdrawValue, setWithdrawValue] = useState('');\n  const [invoiseValue, setInvoiseValue] = useState('');\n  const [payMethod, setPayMethod] = useState<string>('');\n  const [invoisePayMethod, setInvosePayMethod] = useState<PayMethod[]>([]);\n  const [withdrawPayMethod, setWithdrawPayMethod] = useState<PayMethod[]>([]);\n  const [page, setPage] = useState('form');\n\n  useEffect(() => {\n    getPayMethods().then((result: ResultPaymethods) => {\n      setInvosePayMethod(result.invoice);\n      setInvoicePayMethodId(result.invoice[0].id);\n      setWithdrawPayMethod(result.withdraw);\n      setWithdrawPayMethodId(result.withdraw[0].id);\n    });\n  }, []);\n\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'invoice') {\n      setInvoiseValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'invoice', withdrawPayMethodId, value)\n          .then((result: Amount) => {\n            setWithdrawValue(String(result.amount));\n            setPayMethod('invoice');\n          });\n      } else {\n        setWithdrawValue('');\n      }\n      return;\n    }\n\n    if (name === 'withdraw') {\n      setWithdrawValue(value);\n      if (value) {\n        getValueInvoise(invoicePayMethodId, 'withdraw', withdrawPayMethodId, value)\n          .then((result: Amount) => {\n            setInvoiseValue(String(result.amount));\n            setPayMethod('withdraw');\n          });\n      } else {\n        setInvoiseValue('');\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {page === 'form' && (\n        <ExchangeForm\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          setPage={setPage}\n          setInvoicePayMethodId={setInvoicePayMethodId}\n          handleChangeValue={handleChangeValue}\n          setWithdrawPayMethodId={setWithdrawPayMethodId}\n          withdrawValue={withdrawValue}\n          invoiseValue={invoiseValue}\n        />\n      )}\n      {page === 'conferm' && (\n        <ConfirmationPage\n          withdrawValue={withdrawValue}\n          payMethod={payMethod}\n          invoiseValue={invoiseValue}\n          invoisePayMethod={invoisePayMethod}\n          withdrawPayMethod={withdrawPayMethod}\n          invoicePayMethodId={invoicePayMethodId}\n          withdrawPayMethodId={withdrawPayMethodId}\n          setPage={setPage}\n        />\n      )}\n      {page === 'success' && (\n        <SuccessPage />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}