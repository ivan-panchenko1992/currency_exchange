{"version":3,"sources":["Api/request.ts","Api/queryRequests.ts","images/Vector.svg","Components/SuccessPage/SuccessPage.tsx","Components/Ð¡onfirmationPage/ConfirmationPage.tsx","Components/ExchangeForm/ExchangeForm.tsx","App.tsx","index.tsx"],"names":["request","url","fetch","then","respose","json","catch","Error","BASE_URL","getSuccess","amount","base","sellPayMethod","buyPayMethod","data","invoicePayMethod","withdrawPayMethod","method","headers","body","JSON","stringify","response","ok","statusText","error","console","log","SuccessPage","React","memo","reset","className","alt","src","Vector","type","onClick","ConfirmationPage","invoiceValue","withdrawValue","invoicePayMethods","withdrawPayMethods","invoicePayMethodId","withdrawPayMethodId","setPage","payMethod","useState","isLoading","setIsLoading","invoicePayMethodName","find","id","withdrawPayMethodName","classNames","name","disabled","result","message","ExchangeForm","setInvoicePayMethodId","handleChangeValue","setWithdrawPayMethodId","isNotAdd","setIsNotAdd","onSubmit","event","preventDefault","exchangeSubmit","noValidate","onChange","target","value","map","min","placeholder","App","setWithdrawValue","setInvoiceValue","setPayMethod","setInvocePayMethod","setWithdrawPayMethod","page","useEffect","invoice","withdraw","query","useCallback","debounce","invoiceId","withdrawId","idInvoice","idWithdraw","stringified","queryString","getResultValue","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAU,SAACC,GAAD,OAAiBC,MAAMD,GAC3CE,MAAK,SAACC,GAAD,OAAaA,EAAQC,UAAQC,OAAM,kBAAM,IAAIC,MAAM,uBCArDC,EAAW,0CAiBJC,EAAa,SACxBC,EAAgBC,EAAcC,EAAuBC,GAErD,IDlBuCC,ECyBvC,ODzBuCA,ECkBf,CACtBJ,SACAC,OACAI,iBAAkBH,EAClBI,kBAAmBH,GDtBqCX,MAAM,GAAD,OCyB5CM,EDzB4C,SAAgB,CAC/ES,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KACpBX,MAAK,SAACmB,GACP,IAAKA,EAASC,GACZ,MAAMhB,MAAMe,EAASE,YAEvB,OAAOF,EAASjB,UAGfC,OAAM,SAACmB,GAAD,OAAWC,QAAQC,IAAIF,OElBjB,MAA0B,mC,OCQ5BG,EAA+BC,IAAMC,MAAK,gBAAGC,EAAH,EAAGA,MAAH,OACrD,uBAAMC,UAAU,eAAhB,UACE,qBAAKC,IAAI,UAAUC,IAAKC,IACxB,oBAAIH,UAAU,wBAAd,sBACA,oBAAGA,UAAU,qBAAb,gDAEE,uBAFF,8CAKA,wBACEI,KAAK,SACLJ,UAAU,uBACVK,QAAS,kBAAMN,KAHjB,wBCCSO,EAAoC,SAAC,GAW3C,IAVLC,EAUI,EAVJA,aACAC,EASI,EATJA,cACAC,EAQI,EARJA,kBACAC,EAOI,EAPJA,mBACAC,EAMI,EANJA,mBACAC,EAKI,EALJA,oBACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAf,EAEI,EAFJA,MAGA,EAAkCgB,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAuBT,EAC1BU,MAAK,SAAClC,GAAD,OAAYA,EAAOmC,KAAOT,KAC5BU,EAAwBX,EAC3BS,MAAK,SAAClC,GAAD,OAAYA,EAAOmC,KAAOR,KAwBlC,OACE,sBAAKZ,UAAWsB,IAAW,oBAAqB,CAC9C,4BAA6BN,IAD/B,UAIE,oBAAIhB,UAAU,6BAAd,qBACA,sBAAKA,UAAU,6BAAf,UACE,mBAAGA,UAAU,kCAAb,mBACA,oBACEA,UAAU,sCADZ,UAGGO,EACA,IAJH,OAKGW,QALH,IAKGA,OALH,EAKGA,EAAsBK,WAG3B,sBAAKvB,UAAU,8BAAf,UACE,mBAAGA,UAAU,kCAAb,kBACA,oBACEA,UAAU,uCADZ,UAGGQ,EACA,IAJH,OAKGa,QALH,IAKGA,OALH,EAKGA,EAAuBE,WAG5B,sBAAKvB,UAAU,4BAAf,UACE,wBACEI,KAAK,SACLoB,SAAUR,EACVhB,UAAU,mCACVK,QAAS,kBAAMN,KAJjB,oBAQA,wBACEK,KAAK,SACLoB,SAAUR,EACVhB,UAAU,qCACVK,QAAS,kBA5DfY,GAAa,GACK,YAAdH,GACFrC,EAAW8B,EAAcO,EAAWH,EAAoBC,GACrDzC,MAAK,SAACsD,GACkB,YAAnBA,EAAOC,UACTT,GAAa,GACbJ,EAAQ,oBAIE,aAAdC,GACFrC,EAAW+B,EAAeM,EAAWH,EAAoBC,GACtDzC,MAAK,SAACsD,GACkB,YAAnBA,EAAOC,UACTT,GAAa,GACbJ,EAAQ,iBAyCZ,SAMGG,EACG,aACA,oBCtFDW,EAAgC,SAAC,GAUvC,IATLd,EASI,EATJA,QACAe,EAQI,EARJA,sBACAC,EAOI,EAPJA,kBACAC,EAMI,EANJA,uBACAvB,EAKI,EALJA,aACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,mBACAM,EACI,EADJA,UAEA,EAAgCD,oBAAS,GAAzC,mBAAOgB,EAAP,KAAiBC,EAAjB,KAUA,OACE,uBACEhC,UAAU,iBACViC,SAAU,SAACC,GAAD,OAXS,SAACA,GACtBA,EAAMC,iBACe,KAAjB5B,GAAyC,KAAlBC,IACzBK,EAAQ,WACRmB,GAAY,IAEdA,GAAY,GAKWI,CAAeF,IACpCG,YAAU,EAHZ,UAKE,sBAAKrC,UAAU,iBAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,oBAAIA,UAAU,yBAAd,kBACA,wBACEuB,KAAK,SACLvB,UAAU,wBACVsC,SAAU,SAACJ,GACTN,GAAuBM,EAAMK,OAAOC,QAJxC,SAOG/B,EAAkBgC,KAAI,SAACxD,GAAD,OACrB,wBACEuD,MAAOvD,EAAOmC,GADhB,SAIGnC,EAAOsC,MAFHtC,EAAOmC,SAMlB,uBACEhB,KAAK,SACLmB,KAAK,UACLmB,IAAI,OACJF,MAAOjC,EACPoC,YAAY,qBACZ3C,UAAU,uBACVsC,SAAU,SAACJ,GAAD,OAAWL,EAAkBK,SAG3C,sBAAKlC,UAAU,gBAAf,UACE,oBAAIA,UAAU,yBAAd,iBACA,wBACEuB,KAAK,SACLvB,UAAU,wBACVsC,SAAU,SAACJ,GAAD,OAAWJ,GAAwBI,EAAMK,OAAOC,QAH5D,SAKG9B,EAAmB+B,KAAI,SAACxD,GAAD,OACtB,wBACEuD,MAAOvD,EAAOmC,GADhB,SAIGnC,EAAOsC,MAFHtC,EAAOmC,SAMlB,uBACEhB,KAAK,SACLmB,KAAK,WACLmB,IAAI,OACJF,MAAOhC,EACPmC,YAAY,qBACZ3C,UAAU,uBACVsC,SAAU,SAACJ,GAAD,OAAWL,EAAkBK,YAI5CH,GACI,uFACL,qBAAK/B,UAAU,mBAAf,SACE,wBACEA,UAAU,2BACVI,KAAK,SACLoB,SAAUR,EAHZ,4BCgBO4B,EA3GO,WACpB,MAAoD7B,mBAAiB,GAArE,mBAAOJ,EAAP,KAA2BiB,EAA3B,KACA,EAAsDb,mBAAiB,GAAvE,mBAAOH,EAAP,KAA4BkB,EAA5B,KACA,EAA0Cf,mBAAS,IAAnD,mBAAOP,EAAP,KAAsBqC,EAAtB,KACA,EAAwC9B,mBAAS,IAAjD,mBAAOR,EAAP,KAAqBuC,EAArB,KACA,EAAkC/B,mBAAiB,IAAnD,mBAAOD,EAAP,KAAkBiC,EAAlB,KACA,EAAgDhC,mBAAsB,IAAtE,mBAAON,EAAP,KAA0BuC,EAA1B,KACA,EAAmDjC,mBAAsB,IAAzE,mBAAOL,EAAP,KAA2BuC,EAA3B,KACA,EAAwBlC,mBAAS,QAAjC,mBAAOmC,EAAP,KAAarC,EAAb,KACA,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAkC,qBAAU,WACRlC,GAAa,GLlBkBjD,EAAQ,GAAD,OAAIQ,EAAJ,gBKmBtBL,MAAK,SAACsD,GACpBuB,EAAmBvB,EAAO2B,SAC1BxB,EAAsBH,EAAO2B,QAAQ,GAAGhC,IACxC6B,EAAqBxB,EAAO4B,UAC5BvB,EAAuBL,EAAO4B,SAAS,GAAGjC,IAC1CH,GAAa,QAEd,IAEH,IAAMqC,EAAQC,sBAAYC,aAAS,SACjChB,EACAiB,EACAxE,EACAyE,GAEA,OAAKlB,GAMLvB,GAAa,GLtCa,SAC5B0C,EAAmBhF,EAAaiF,EAAoBlF,GAEpD,IAAMmF,EAAcC,IAAYzE,UAAU,CACxCV,OACAD,SACAK,iBAAkB4E,EAClB3E,kBAAmB4E,IAGrB,OAAO5F,EAAQ,GAAD,OAAIQ,GAAJ,OAbE,0BAaF,OAA2BqF,IK6BhCE,CAAeN,EAAWxE,EAAQyE,EAAYlB,GAAOrE,MAAK,SAACsD,GACjD,YAAXxC,IACF4D,EAAiBmB,OAAOvC,EAAO/C,SAC/BqE,EAAa,WACb9B,GAAa,IAGA,aAAXhC,IACF6D,EAAgBkB,OAAOvC,EAAO/C,SAC9BqE,EAAa,YACb9B,GAAa,SAhBA,YAAXhC,GAAsB4D,EAAiB,IAC5B,aAAX5D,GAAuB6D,EAAgB,IAEpC,QAgBR,KAAM,IAWH/C,EAAQwD,uBAAY,WACxBT,EAAgB,IAChBD,EAAiB,IACjBjB,EAAsBnB,EAAkB,GAAGW,IAC3CU,EAAuBpB,EAAmB,GAAGU,IAC7CP,EAAQ,UACP,CAACF,EAAoBC,IAExB,OACE,sBAAKZ,UAAWsB,IAAW,MAAO,CAChC,cAAeN,IADjB,UAIY,SAATkC,GACC,cAAC,EAAD,CACEzC,kBAAmBA,EACnBC,mBAAoBA,EACpBG,QAASA,EACTe,sBAAuBA,EACvBC,kBA5BkB,SAACK,GACzB,MAAwBA,EAAMK,OAAtBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MAED,YAATjB,GAAoBuB,EAAgBN,GAC3B,aAATjB,GAAqBsB,EAAiBL,GAE1Cc,EAAMd,EAAO7B,EAAoBY,EAAMX,IAuBjCkB,uBAAwBA,EACxBtB,cAAeA,EACfD,aAAcA,EACdS,UAAWA,IAGL,YAATkC,GACC,cAAC,EAAD,CACE1C,cAAeA,EACfM,UAAWA,EACXP,aAAcA,EACdE,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpBC,oBAAqBA,EACrBC,QAASA,EACTd,MAAOA,IAGD,YAATmD,GACC,cAACtD,EAAD,CACEG,MAAOA,QC1GjBkE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.eeda604d.chunk.js","sourcesContent":["import { PostBody } from '../interfaces';\n\nexport const request = (url: string) => fetch(url)\n  .then((respose) => respose.json()).catch(() => new Error('failed download'));\n\nexport const postRequest = (url: string, data: PostBody) => fetch(`${url}/bids`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data),\n}).then((response) => {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n  return response.json();\n})\n  // eslint-disable-next-line no-console\n  .catch((error) => console.log(error));\n","import queryString from 'query-string';\nimport { request, postRequest } from './request';\n\nconst BASE_URL = 'https://involve.software/test_front/api';\nconst calculate = '/payMethods/calculate?';\nexport const getPayMethods = () => request(`${BASE_URL}/payMethods`);\n\nexport const getResultValue = (\n  idInvoice: number, base:string, idWithdraw: number, amount: string,\n) => {\n  const stringified = queryString.stringify({\n    base,\n    amount,\n    invoicePayMethod: idInvoice,\n    withdrawPayMethod: idWithdraw,\n  });\n\n  return request(`${BASE_URL}${calculate}${stringified}`);\n};\n\nexport const getSuccess = (\n  amount: string, base: string, sellPayMethod: number, buyPayMethod: number,\n) => {\n  const prepearedQuerry = {\n    amount,\n    base,\n    invoicePayMethod: sellPayMethod,\n    withdrawPayMethod: buyPayMethod,\n  };\n\n  return postRequest(BASE_URL, prepearedQuerry);\n};\n","export default __webpack_public_path__ + \"static/media/Vector.a167a025.svg\";","import React from 'react';\n\nimport Vector from '../../images/Vector.svg';\n\ninterface Props {\n  reset: () => void;\n}\n\nexport const SuccessPage: React.FC<Props> = React.memo(({ reset }) => (\n  <form className=\"success-page\">\n    <img alt=\"success\" src={Vector} />\n    <h1 className=\"success-page__heading\">Success!</h1>\n    <p className=\"success-page__text\">\n      Your exchange order has been placed\n      <br />\n      successfully and will be processed soon.\n    </p>\n    <button\n      type=\"button\"\n      className=\"success-page__button\"\n      onClick={() => reset()}\n    >\n      Home\n    </button>\n  </form>\n));\n","import React, { useState } from 'react';\n\nimport classNames from 'classnames';\nimport { PayMethod, ConfirmatoryAnswer } from '../../interfaces';\nimport { getSuccess } from '../../Api/queryRequests';\n\ninterface Props {\n  payMethod: string,\n  invoiceValue: string,\n  withdrawValue: string,\n  invoicePayMethods: PayMethod[],\n  withdrawPayMethods: PayMethod[],\n  invoicePayMethodId: number,\n  withdrawPayMethodId: number,\n  setPage: React.Dispatch<React.SetStateAction<string>>,\n  reset: () => void,\n}\n\nexport const ConfirmationPage: React.FC<Props> = ({\n  invoiceValue,\n  withdrawValue,\n  invoicePayMethods,\n  withdrawPayMethods,\n  invoicePayMethodId,\n  withdrawPayMethodId,\n  setPage,\n  payMethod,\n  reset,\n\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const invoicePayMethodName = invoicePayMethods\n    .find((method) => method.id === invoicePayMethodId);\n  const withdrawPayMethodName = withdrawPayMethods\n    .find((method) => method.id === withdrawPayMethodId);\n\n  const confirmation = () => {\n    setIsLoading(true);\n    if (payMethod === 'invoice') {\n      getSuccess(invoiceValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setIsLoading(false);\n            setPage('success');\n          }\n        });\n    }\n    if (payMethod === 'withdraw') {\n      getSuccess(withdrawValue, payMethod, invoicePayMethodId, withdrawPayMethodId)\n        .then((result: ConfirmatoryAnswer) => {\n          if (result.message === 'Success') {\n            setIsLoading(false);\n            setPage('success');\n          }\n        });\n    }\n  };\n\n  return (\n    <div className={classNames('card-confirmation', {\n      'card-confirmation-loading': isLoading,\n    })}\n    >\n      <h1 className=\"card-confirmation__heading\">Details</h1>\n      <div className=\"card-confirmation__invoise\">\n        <p className=\"card-confirmation__invoise-sell\">Sell:</p>\n        <p\n          className=\"card-confirmation__invoise-quontity\"\n        >\n          {invoiceValue}\n          {' '}\n          {invoicePayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__withdraw\">\n        <p className=\"card-confirmation__withdraw-buy\">Buy:</p>\n        <p\n          className=\"card-confirmation__withdraw-quontity\"\n        >\n          {withdrawValue}\n          {' '}\n          {withdrawPayMethodName?.name}\n        </p>\n      </div>\n      <div className=\"card-confirmation__button\">\n        <button\n          type=\"button\"\n          disabled={isLoading}\n          className=\"card-confirmation__button-cancel\"\n          onClick={() => reset()}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          disabled={isLoading}\n          className=\"card-confirmation__button-confirme\"\n          onClick={() => confirmation()}\n        >\n          {isLoading\n            ? 'Loading...'\n            : 'Confirme'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { PayMethod } from '../../interfaces';\n\ninterface Props {\n  invoicePayMethods: PayMethod[],\n  setPage: React.Dispatch<React.SetStateAction<string>>,\n  setInvoicePayMethodId: React.Dispatch<React.SetStateAction<number>>,\n  handleChangeValue: any,\n  setWithdrawPayMethodId: React.Dispatch<React.SetStateAction<number>>,\n  invoiceValue: string,\n  withdrawValue: string,\n  withdrawPayMethods: PayMethod[],\n  isLoading:boolean,\n}\n\nexport const ExchangeForm: React.FC<Props> = ({\n  setPage,\n  setInvoicePayMethodId,\n  handleChangeValue,\n  setWithdrawPayMethodId,\n  invoiceValue,\n  withdrawValue,\n  invoicePayMethods,\n  withdrawPayMethods,\n  isLoading,\n}) => {\n  const [isNotAdd, setIsNotAdd] = useState(false);\n\n  const exchangeSubmit = (event: any) => {\n    event.preventDefault();\n    if (invoiceValue !== '' && withdrawValue !== '') {\n      setPage('conferm');\n      setIsNotAdd(false);\n    }\n    setIsNotAdd(true);\n  };\n  return (\n    <form\n      className=\"form-container\"\n      onSubmit={(event) => exchangeSubmit(event)}\n      noValidate\n    >\n      <div className=\"card-container\">\n        <div className=\"card-exchange\">\n          <h1 className=\"card-exchange__heading\">Sell</h1>\n          <select\n            name=\"select\"\n            className=\"card-exchange__select\"\n            onChange={(event) => {\n              setInvoicePayMethodId(+event.target.value);\n            }}\n          >\n            {invoicePayMethods.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"invoice\"\n            min=\"0.01\"\n            value={invoiceValue}\n            placeholder=\"write your numbers\"\n            className=\"card-exchange__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n        <div className=\"card-exchange\">\n          <h1 className=\"card-exchange__heading\">Buy</h1>\n          <select\n            name=\"select\"\n            className=\"card-exchange__select\"\n            onChange={(event) => setWithdrawPayMethodId(+event.target.value)}\n          >\n            {withdrawPayMethods.map((method) => (\n              <option\n                value={method.id}\n                key={method.id}\n              >\n                {method.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"number\"\n            name=\"withdraw\"\n            min=\"0.01\"\n            value={withdrawValue}\n            placeholder=\"write your numbers\"\n            className=\"card-exchange__input\"\n            onChange={(event) => handleChangeValue(event)}\n          />\n        </div>\n      </div>\n      {isNotAdd\n        && <p>âYou forgot to enter quantity of currenciesâ</p>}\n      <div className=\"button-container\">\n        <button\n          className=\"button-container__button\"\n          type=\"submit\"\n          disabled={isLoading}\n        >\n          Exchange\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport { debounce } from 'ts-debounce';\n\nimport classNames from 'classnames';\nimport { getResultValue, getPayMethods } from './Api/queryRequests';\nimport { ResultPaymethods, PayMethod, Amount } from './interfaces';\nimport { SuccessPage } from './Components/SuccessPage/SuccessPage';\nimport { ConfirmationPage } from './Components/Ð¡onfirmationPage/ConfirmationPage';\nimport { ExchangeForm } from './Components/ExchangeForm/ExchangeForm';\n\nconst App: React.FC = () => {\n  const [invoicePayMethodId, setInvoicePayMethodId] = useState<number>(0);\n  const [withdrawPayMethodId, setWithdrawPayMethodId] = useState<number>(0);\n  const [withdrawValue, setWithdrawValue] = useState('');\n  const [invoiceValue, setInvoiceValue] = useState('');\n  const [payMethod, setPayMethod] = useState<string>('');\n  const [invoicePayMethods, setInvocePayMethod] = useState<PayMethod[]>([]);\n  const [withdrawPayMethods, setWithdrawPayMethod] = useState<PayMethod[]>([]);\n  const [page, setPage] = useState('form');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPayMethods().then((result: ResultPaymethods) => {\n      setInvocePayMethod(result.invoice);\n      setInvoicePayMethodId(result.invoice[0].id);\n      setWithdrawPayMethod(result.withdraw);\n      setWithdrawPayMethodId(result.withdraw[0].id);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const query = useCallback(debounce((\n    value: string,\n    invoiceId: number,\n    method: string,\n    withdrawId: number,\n  ) => {\n    if (!value) {\n      if (method === 'invoice') setWithdrawValue('');\n      if (method === 'withdraw') setInvoiceValue('');\n\n      return null;\n    }\n    setIsLoading(true);\n    return getResultValue(invoiceId, method, withdrawId, value).then((result: Amount) => {\n      if (method === 'invoice') {\n        setWithdrawValue(String(result.amount));\n        setPayMethod('invoice');\n        setIsLoading(false);\n      }\n\n      if (method === 'withdraw') {\n        setInvoiceValue(String(result.amount));\n        setPayMethod('withdraw');\n        setIsLoading(false);\n      }\n    });\n  }, 500), []);\n\n  const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'invoice') setInvoiceValue(value);\n    if (name === 'withdraw') setWithdrawValue(value);\n\n    query(value, invoicePayMethodId, name, withdrawPayMethodId);\n  };\n\n  const reset = useCallback(() => {\n    setInvoiceValue('');\n    setWithdrawValue('');\n    setInvoicePayMethodId(invoicePayMethods[0].id);\n    setWithdrawPayMethodId(withdrawPayMethods[0].id);\n    setPage('form');\n  }, [invoicePayMethodId, withdrawPayMethodId]);\n\n  return (\n    <div className={classNames('app', {\n      'app-loading': isLoading,\n    })}\n    >\n      {page === 'form' && (\n        <ExchangeForm\n          invoicePayMethods={invoicePayMethods}\n          withdrawPayMethods={withdrawPayMethods}\n          setPage={setPage}\n          setInvoicePayMethodId={setInvoicePayMethodId}\n          handleChangeValue={handleChangeValue}\n          setWithdrawPayMethodId={setWithdrawPayMethodId}\n          withdrawValue={withdrawValue}\n          invoiceValue={invoiceValue}\n          isLoading={isLoading}\n        />\n      )}\n      {page === 'conferm' && (\n        <ConfirmationPage\n          withdrawValue={withdrawValue}\n          payMethod={payMethod}\n          invoiceValue={invoiceValue}\n          invoicePayMethods={invoicePayMethods}\n          withdrawPayMethods={withdrawPayMethods}\n          invoicePayMethodId={invoicePayMethodId}\n          withdrawPayMethodId={withdrawPayMethodId}\n          setPage={setPage}\n          reset={reset}\n        />\n      )}\n      {page === 'success' && (\n        <SuccessPage\n          reset={reset}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}